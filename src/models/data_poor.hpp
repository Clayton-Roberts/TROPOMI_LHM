
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace data_poor_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 35> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 20, column 4 to column 34)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 21, column 4 to column 36)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 22, column 4 to column 34)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 25, column 4 to column 23)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 26, column 4 to column 25)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 27, column 4 to column 22)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 29, column 4 to column 30)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 30, column 4 to column 19)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 31, column 4 to column 19)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 32, column 4 to column 25)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 33, column 4 to column 25)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 34, column 4 to column 25)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 35, column 4 to column 25)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 50, column 4 to column 15)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 51, column 4 to column 14)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 53, column 4 to column 21)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 54, column 4 to column 21)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 40, column 4 to column 27)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 42, column 4 to column 36)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 44, column 11 to column 12)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 44, column 4 to column 56)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 45, column 4 to column 91)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 47, column 4 to column 37)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 5, column 4 to column 30)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 6, column 11 to column 12)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 6, column 4 to column 36)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 7, column 11 to column 12)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 7, column 4 to column 36)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 8, column 4 to column 36)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 9, column 4 to column 36)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 11, column 4 to column 34)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 13, column 4 to column 36)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 16, column 4 to column 19)",
 " (in '/Users/claytonroberts/Documents/TROPOMI_LHM/src/models/data_poor.stan', line 17, column 4 to column 36)"};



class data_poor_model final : public model_base_crtp<data_poor_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> NO2_obs__;
  Eigen::Matrix<double, -1, 1> CH4_obs__;
  double sigma_N;
  double sigma_C;
  Eigen::Matrix<double, -1, 1> theta__;
  Eigen::Matrix<double, -1, -1> Upsilon__;
  Eigen::Matrix<double, -1, -1> L__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> NO2_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> CH4_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> theta{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Upsilon{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> L{nullptr, 0, 0};
 
 public:
  ~data_poor_model() { }
  
  inline std::string model_name() const final { return "data_poor_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  data_poor_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "data_poor_model_namespace::data_poor_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 24;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 24;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 24;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 25;
      validate_non_negative_index("NO2_obs", "N", N);
      current_statement__ = 26;
      context__.validate_dims("data initialization","NO2_obs","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      NO2_obs__ = Eigen::Matrix<double, -1, 1>(N);
      new (&NO2_obs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(NO2_obs__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> NO2_obs_flat__;
        current_statement__ = 26;
        NO2_obs_flat__ = context__.vals_r("NO2_obs");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 26;
          assign(NO2_obs, NO2_obs_flat__[(pos__ - 1)],
            "assigning variable NO2_obs", index_uni(sym1__));
          current_statement__ = 26;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 27;
      validate_non_negative_index("CH4_obs", "N", N);
      current_statement__ = 28;
      context__.validate_dims("data initialization","CH4_obs","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      CH4_obs__ = Eigen::Matrix<double, -1, 1>(N);
      new (&CH4_obs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(CH4_obs__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> CH4_obs_flat__;
        current_statement__ = 28;
        CH4_obs_flat__ = context__.vals_r("CH4_obs");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 28;
          assign(CH4_obs, CH4_obs_flat__[(pos__ - 1)],
            "assigning variable CH4_obs", index_uni(sym1__));
          current_statement__ = 28;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 29;
      context__.validate_dims("data initialization","sigma_N","double",
           std::vector<size_t>{});
      sigma_N = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 29;
      sigma_N = context__.vals_r("sigma_N")[(1 - 1)];
      current_statement__ = 29;
      check_greater_or_equal(function__, "sigma_N", sigma_N, 0);
      current_statement__ = 30;
      context__.validate_dims("data initialization","sigma_C","double",
           std::vector<size_t>{});
      sigma_C = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 30;
      sigma_C = context__.vals_r("sigma_C")[(1 - 1)];
      current_statement__ = 30;
      check_greater_or_equal(function__, "sigma_C", sigma_C, 0);
      current_statement__ = 31;
      context__.validate_dims("data initialization","theta","double",
           std::vector<size_t>{static_cast<size_t>(5)});
      theta__ = Eigen::Matrix<double, -1, 1>(5);
      new (&theta) Eigen::Map<Eigen::Matrix<double, -1, 1>>(theta__.data(), 5);
      
      
      {
        std::vector<local_scalar_t__> theta_flat__;
        current_statement__ = 31;
        theta_flat__ = context__.vals_r("theta");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 31;
          assign(theta, theta_flat__[(pos__ - 1)],
            "assigning variable theta", index_uni(sym1__));
          current_statement__ = 31;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 32;
      context__.validate_dims("data initialization","Upsilon","double",
           std::vector<size_t>{static_cast<size_t>(5),
            static_cast<size_t>(5)});
      Upsilon__ = Eigen::Matrix<double, -1, -1>(5, 5);
      new (&Upsilon) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Upsilon__.data(), 5, 5);
      
      
      {
        std::vector<local_scalar_t__> Upsilon_flat__;
        current_statement__ = 32;
        Upsilon_flat__ = context__.vals_r("Upsilon");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 32;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 32;
            assign(Upsilon, Upsilon_flat__[(pos__ - 1)],
              "assigning variable Upsilon", index_uni(sym2__),
                                              index_uni(sym1__));
            current_statement__ = 32;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 32;
      check_cov_matrix(function__, "Upsilon", Upsilon);
      current_statement__ = 33;
      L__ = Eigen::Matrix<double, -1, -1>(5, 5);
      new (&L) Eigen::Map<Eigen::Matrix<double, -1, -1>>(L__.data(), 5, 5);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 34;
      assign(L, cholesky_decompose(Upsilon), "assigning variable L");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 5 + 2;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "data_poor_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ gamma;
      gamma = DUMMY_VAR__;
      
      current_statement__ = 1;
      gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> epsilon;
      epsilon = Eigen::Matrix<local_scalar_t__, -1, 1>(5);
      stan::math::fill(epsilon, DUMMY_VAR__);
      
      current_statement__ = 2;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(5);
      Eigen::Matrix<local_scalar_t__, -1, 1> kappa;
      kappa = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(kappa, DUMMY_VAR__);
      
      current_statement__ = 3;
      kappa = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<local_scalar_t__, -1, 1> tau;
      tau = Eigen::Matrix<local_scalar_t__, -1, 1>(5);
      stan::math::fill(tau, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> Sigma;
      Sigma = Eigen::Matrix<local_scalar_t__, -1, -1>(2, 2);
      stan::math::fill(Sigma, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 7;
      assign(tau, add(theta, multiply(L, epsilon)), "assigning variable tau");
      current_statement__ = 8;
      assign(mu, rvalue(tau, "tau", index_uni(1)),
        "assigning variable mu", index_uni(1));
      current_statement__ = 9;
      assign(mu, rvalue(tau, "tau", index_uni(2)),
        "assigning variable mu", index_uni(2));
      current_statement__ = 10;
      assign(Sigma, rvalue(tau, "tau", index_uni(3)),
        "assigning variable Sigma", index_uni(1), index_uni(1));
      current_statement__ = 11;
      assign(Sigma, rvalue(tau, "tau", index_uni(4)),
        "assigning variable Sigma", index_uni(1), index_uni(2));
      current_statement__ = 12;
      assign(Sigma, rvalue(tau, "tau", index_uni(4)),
        "assigning variable Sigma", index_uni(2), index_uni(1));
      current_statement__ = 13;
      assign(Sigma, rvalue(tau, "tau", index_uni(5)),
        "assigning variable Sigma", index_uni(2), index_uni(2));
      {
        current_statement__ = 18;
        lp_accum__.add(std_normal_lpdf<propto__>(epsilon));
        current_statement__ = 19;
        lp_accum__.add(multi_normal_lpdf<propto__>(kappa, mu, Sigma));
        current_statement__ = 20;
        validate_non_negative_index("CH4_hat", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> CH4_hat;
        CH4_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(CH4_hat, DUMMY_VAR__);
        
        current_statement__ = 21;
        assign(CH4_hat,
          add(rvalue(kappa, "kappa", index_uni(1)),
            multiply(rvalue(kappa, "kappa", index_uni(2)), NO2_obs)),
          "assigning variable CH4_hat");
        local_scalar_t__ sigma;
        sigma = DUMMY_VAR__;
        
        current_statement__ = 22;
        sigma = stan::math::sqrt(
                  ((square(gamma) + square(sigma_C)) +
                    square((rvalue(kappa, "kappa", index_uni(2)) * sigma_N))));
        current_statement__ = 23;
        lp_accum__.add(normal_lpdf<propto__>(CH4_obs, CH4_hat, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "data_poor_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double gamma;
      gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> epsilon;
      epsilon = Eigen::Matrix<double, -1, 1>(5);
      stan::math::fill(epsilon, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(5);
      Eigen::Matrix<double, -1, 1> kappa;
      kappa = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(kappa, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      kappa = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<double, -1, 1> tau;
      tau = Eigen::Matrix<double, -1, 1>(5);
      stan::math::fill(tau, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Sigma;
      Sigma = Eigen::Matrix<double, -1, -1>(2, 2);
      stan::math::fill(Sigma, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(gamma);
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(epsilon[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(kappa[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      assign(tau, add(theta, multiply(L, epsilon)), "assigning variable tau");
      current_statement__ = 8;
      assign(mu, rvalue(tau, "tau", index_uni(1)),
        "assigning variable mu", index_uni(1));
      current_statement__ = 9;
      assign(mu, rvalue(tau, "tau", index_uni(2)),
        "assigning variable mu", index_uni(2));
      current_statement__ = 10;
      assign(Sigma, rvalue(tau, "tau", index_uni(3)),
        "assigning variable Sigma", index_uni(1), index_uni(1));
      current_statement__ = 11;
      assign(Sigma, rvalue(tau, "tau", index_uni(4)),
        "assigning variable Sigma", index_uni(1), index_uni(2));
      current_statement__ = 12;
      assign(Sigma, rvalue(tau, "tau", index_uni(4)),
        "assigning variable Sigma", index_uni(2), index_uni(1));
      current_statement__ = 13;
      assign(Sigma, rvalue(tau, "tau", index_uni(5)),
        "assigning variable Sigma", index_uni(2), index_uni(2));
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          vars__.emplace_back(tau[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(
              rvalue(Sigma, "Sigma", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(mu[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      double beta;
      beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      alpha = rvalue(kappa, "kappa", index_uni(1));
      current_statement__ = 17;
      beta = rvalue(kappa, "kappa", index_uni(2));
      vars__.emplace_back(alpha);
      vars__.emplace_back(beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double gamma;
      gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      gamma = context__.vals_r("gamma")[(1 - 1)];
      double gamma_free__;
      gamma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      gamma_free__ = stan::math::lb_free(gamma, 0);
      Eigen::Matrix<double, -1, 1> epsilon;
      epsilon = Eigen::Matrix<double, -1, 1>(5);
      stan::math::fill(epsilon, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> epsilon_flat__;
        current_statement__ = 2;
        epsilon_flat__ = context__.vals_r("epsilon");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 2;
          assign(epsilon, epsilon_flat__[(pos__ - 1)],
            "assigning variable epsilon", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> kappa;
      kappa = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(kappa, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> kappa_flat__;
        current_statement__ = 3;
        kappa_flat__ = context__.vals_r("kappa");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 3;
          assign(kappa, kappa_flat__[(pos__ - 1)],
            "assigning variable kappa", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      vars__.emplace_back(gamma_free__);
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(epsilon[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(kappa[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"gamma", "epsilon", "kappa", "tau",
      "Sigma", "mu", "alpha", "beta"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "gamma");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "kappa" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "alpha");
      param_names__.emplace_back(std::string() + "beta");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "gamma");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "kappa" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "alpha");
      param_names__.emplace_back(std::string() + "beta");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = data_poor_model_namespace::data_poor_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return data_poor_model_namespace::profiles__;
}

#endif


